# Generated by Django 4.2.13 on 2024-06-11 17:18

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("credentials", "0029_alter_usercredential_credential_content_type"),
        ("sites", "0002_alter_domain_unique"),
    ]

    operations = [
        migrations.CreateModel(
            name="BadgeProgress",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("username", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name_plural": "badge progress records",
            },
        ),
        migrations.CreateModel(
            name="BadgeRequirement",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            (
                                "org.openedx.learning.course.passing.status.updated.v1",
                                "org.openedx.learning.course.passing.status.updated.v1",
                            ),
                            (
                                "org.openedx.learning.ccx.course.passing.status.updated.v1",
                                "org.openedx.learning.ccx.course.passing.status.updated.v1",
                            ),
                        ],
                        help_text='Public signal type. Available events are configured in "BADGES_CONFIG" setting. The crucial aspect for event to carry UserData in its payload.',
                        max_length=255,
                    ),
                ),
                ("description", models.TextField(blank=True, help_text="Provide more details if needed.", null=True)),
                (
                    "blend",
                    models.CharField(
                        blank=True,
                        help_text="Optional. Group requirements together using the same Group ID for interchangeable (OR processing logic).",
                        max_length=255,
                        null=True,
                        verbose_name="group",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BadgeTemplate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("uuid", models.UUIDField(default=uuid.uuid4, help_text="Unique badge template ID.", unique=True)),
                ("name", models.CharField(help_text="Badge template name.", max_length=255)),
                ("description", models.TextField(blank=True, help_text="Badge template description.", null=True)),
                ("icon", models.ImageField(blank=True, null=True, upload_to="badge_templates/icons")),
                ("origin", models.CharField(blank=True, help_text="Badge template type.", max_length=128, null=True)),
                (
                    "state",
                    model_utils.fields.StatusField(
                        choices=[("draft", "draft"), ("active", "active"), ("archived", "archived")],
                        default="draft",
                        help_text="Credly badge template state (auto-managed).",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                ("site", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sites.site")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CredlyBadge",
            fields=[
                (
                    "usercredential_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="credentials.usercredential",
                    ),
                ),
                (
                    "state",
                    model_utils.fields.StatusField(
                        choices=[
                            ("created", "created"),
                            ("no_response", "no_response"),
                            ("error", "error"),
                            ("pending", "pending"),
                            ("accepted", "accepted"),
                            ("rejected", "rejected"),
                            ("revoked", "revoked"),
                            ("expired", "expired"),
                        ],
                        default="created",
                        help_text="Credly badge issuing state",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "external_uuid",
                    models.UUIDField(blank=True, help_text="Credly service badge identifier", null=True, unique=True),
                ),
            ],
            options={
                "get_latest_by": "modified",
                "abstract": False,
            },
            bases=("credentials.usercredential",),
        ),
        migrations.CreateModel(
            name="CredlyOrganization",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("uuid", models.UUIDField(help_text="Put your Credly Organization ID here.", unique=True)),
                (
                    "api_key",
                    models.CharField(
                        blank=True, help_text="Credly API shared secret for Credly Organization.", max_length=255
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Verbose name for Credly Organization.", max_length=255, null=True
                    ),
                ),
            ],
            options={
                "get_latest_by": "modified",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Fulfillment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "blend",
                    models.CharField(
                        blank=True,
                        help_text="Group ID for the requirement.",
                        max_length=255,
                        null=True,
                        verbose_name="group",
                    ),
                ),
                ("progress", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="badges.badgeprogress")),
                (
                    "requirement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fulfillments",
                        to="badges.badgerequirement",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="badgerequirement",
            name="template",
            field=models.ForeignKey(
                help_text="Badge template this requirement serves for.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="requirements",
                to="badges.badgetemplate",
            ),
        ),
        migrations.AddField(
            model_name="badgeprogress",
            name="template",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="badges.badgetemplate"
            ),
        ),
        migrations.CreateModel(
            name="BadgePenalty",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            (
                                "org.openedx.learning.course.passing.status.updated.v1",
                                "org.openedx.learning.course.passing.status.updated.v1",
                            ),
                            (
                                "org.openedx.learning.ccx.course.passing.status.updated.v1",
                                "org.openedx.learning.ccx.course.passing.status.updated.v1",
                            ),
                        ],
                        help_text='Public signal type. Use namespaced types, e.g: "org.openedx.learning.student.registration.completed.v1"',
                        max_length=255,
                    ),
                ),
                (
                    "requirements",
                    models.ManyToManyField(
                        help_text="Badge requirements for which this penalty is defined.", to="badges.badgerequirement"
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        help_text="Badge template this penalty serves for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="badges.badgetemplate",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Badge penalties",
            },
        ),
        migrations.CreateModel(
            name="PenaltyDataRule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "data_path",
                    models.CharField(
                        help_text='Public signal\'s data payload nested property path, e.g: "user.pii.username".',
                        max_length=255,
                        verbose_name="key path",
                    ),
                ),
                (
                    "operator",
                    models.CharField(
                        choices=[("eq", "="), ("ne", "!=")],
                        default="eq",
                        help_text="Expected value comparison operator. https://docs.python.org/3/library/operator.html",
                        max_length=32,
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text='Expected value for the nested property, e.g: "cucumber1997".',
                        max_length=255,
                        verbose_name="expected value",
                    ),
                ),
                (
                    "penalty",
                    models.ForeignKey(
                        help_text="Parent penalty for this data rule.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="badges.badgepenalty",
                    ),
                ),
            ],
            options={
                "unique_together": {("penalty", "data_path", "operator", "value")},
            },
        ),
        migrations.CreateModel(
            name="DataRule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "data_path",
                    models.CharField(
                        help_text='Public signal\'s data payload nested property path, e.g: "user.pii.username".',
                        max_length=255,
                        verbose_name="key path",
                    ),
                ),
                (
                    "operator",
                    models.CharField(
                        choices=[("eq", "="), ("ne", "!=")],
                        default="eq",
                        help_text="Expected value comparison operator. https://docs.python.org/3/library/operator.html",
                        max_length=32,
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text='Expected value for the nested property, e.g: "cucumber1997".',
                        max_length=255,
                        verbose_name="expected value",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        help_text="Parent requirement for this data rule.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="badges.badgerequirement",
                    ),
                ),
            ],
            options={
                "unique_together": {("requirement", "data_path", "operator", "value")},
            },
        ),
        migrations.CreateModel(
            name="CredlyBadgeTemplate",
            fields=[
                (
                    "badgetemplate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="badges.badgetemplate",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Credly Organization - template owner.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="badges.credlyorganization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("badges.badgetemplate",),
        ),
    ]
