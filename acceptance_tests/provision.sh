# This command is meant to be run at least once, in order to prepare test data for acceptance tests.
# It is safe to run multiple times.
# Note that this leaves you with a user & superuser with the hardcoded password 'edx' - so don't run this in
# production, obviously (though it does hardcode the 'local' setting).

set -e

BASEDIR=$(dirname $0)

export DJANGO_SETTINGS_MODULE=credentials.settings.local

./manage.py migrate

./manage.py create_or_update_site \
    --site-domain localhost:19150 \
    --site-name "Acceptance Test Site" \
    --platform-name "AcceptanceX" \
    --company-name "Acceptance Inc" \
    --theme-name "edx.org" \
    --twitter-username "accept" \
    --facebook-app-id "0" \
    --enable-twitter-sharing \
    --enable-linkedin-sharing \
    --enable-facebook-sharing \
    --lms-url-root "http://localhost:0/" \
    --certificate-help-url "http://localhost:0/" \
    --catalog-api-url "http://localhost:0/" \
    --tos-url "http://localhost:0/" \
    --privacy-policy-url "http://localhost:0/" \
    --homepage-url "http://localhost:0/" \
    --records-help-url "http://localhost:0/"

CMDS=$(cat <<-END

# Set up user
from django.contrib.auth import get_user_model
User = get_user_model()
acceptance_user, _ = User.objects.update_or_create(
    username='acceptance_tester',
    defaults={
        'email': 'acceptance@example.com',
        'full_name': "'';!--\"<XSS>=&{()}", # bokchoy-provided xss checker string ('XSS_INJECTION' in bokchoy code)
        'is_active': True,
        'is_staff': False,
        'is_superuser': False,
        'password': 'pbkdf2_sha256$36000$ZvxZjQ6flMUv$W72vIyP7XdOd0VNb5v0dAsbLBgReVn/6AMvhPM4pDuw=',  # 'edx'
    },
)

acceptance_superuser, _ = User.objects.update_or_create(
    username='acceptance_super_tester',
    defaults={
        'email': 'acceptance_super@example.com',
        'full_name': "'';!--\"<XSS>=&{()}", # bokchoy-provided xss checker string ('XSS_INJECTION' in bokchoy code)
        'is_active': True,
        'is_staff': True,
        'is_superuser': True,
        'password': 'pbkdf2_sha256$36000$ZvxZjQ6flMUv$W72vIyP7XdOd0VNb5v0dAsbLBgReVn/6AMvhPM4pDuw=',  # 'edx'
    },
)


# Create sessions for users
from django.conf import settings
from django.contrib.auth import SESSION_KEY, BACKEND_SESSION_KEY, HASH_SESSION_KEY
from django.contrib.sessions.backends.db import SessionStore
session = SessionStore()
session[SESSION_KEY] = acceptance_user.id
session[BACKEND_SESSION_KEY] = settings.AUTHENTICATION_BACKENDS[0]
session[HASH_SESSION_KEY] = acceptance_user.get_session_auth_hash()
session.create()

super_session = SessionStore()
super_session[SESSION_KEY] = acceptance_superuser.id
super_session[BACKEND_SESSION_KEY] = settings.AUTHENTICATION_BACKENDS[0]
super_session[HASH_SESSION_KEY] = acceptance_superuser.get_session_auth_hash()
super_session.create()


# Save session key in a file for our tests to read
file = open('$BASEDIR/auth.py', 'w')
file.write('# This is an autogenerated file. See provision.sh.\n')
file.write('SESSION_KEY = "{}"\n'.format(session.session_key))
file.write('SESSION_SUPER_KEY = "{}"\n'.format(super_session.session_key))
file.close()

END
)
./manage.py shell -c "$CMDS"

./manage.py seed-records --user-name acceptance_tester --site-name "Acceptance Test Site"

exit 0
